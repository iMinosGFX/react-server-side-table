{
  "name": "@optalp/react-server-side-table",
  "version": "2.0.18",
  "description": "ServerSideTable React Component",
  "author": "APrezio",
  "license": "Apache-2.0",
  "exports": {
    "types": "./dist/rollup-plugin-dts.d.ts",
    "import": "./dist/rollup-plugin-dts.mjs",
    "require": "./dist/rollup-plugin-dts.cjs"
  },
  "types": "./dist/rollup-plugin-dts.d.ts",
  "engines": {
    "node": ">=8",
    "npm": ">=5"
  },
  "files": [
    "dist"
  ],
  "scripts": {
    "build": "rollup -c --bundleConfigAsCjs",
    "start": "rollup -c -w",
    "copy-typescript-definitions": "copyfiles -u 1 \"src/**/*.d.ts\" dist",
    "prepack": "node scripts/prepack.js"
  },
  "dependencies": {
    "@rollup/plugin-json": "^4.1.0",
    "@rollup/plugin-typescript": "^11.1.1",
    "@types/react-transition-group": "^4.4.1",
    "@types/styled-components": "^5.1.9",
    "moment": "^2.29.1",
    "polished": "^4.1.3",
    "react-csv": "^2.2.2",
    "react-device-detect": "^1.17.0",
    "react-paginate": "^7.1.2",
    "react-places-autocomplete": "^7.3.0",
    "react-redux": "^7.2.3",
    "react-select": "^4.3.1",
    "react-table": "^7.7.0",
    "react-transition-group": "^4.4.1",
    "rollup-plugin-commonjs": "^10.1.0",
    "rollup-plugin-json": "^4.0.0",
    "rollup-plugin-sass": "^1.12.19",
    "rollup-plugin-svg": "^2.0.0",
    "styled-components": "^5.3.1",
    "tslib": "^2.4.1",
    "xlsx": "^0.18.5"
  },
  "peerDependencies": {
    "@optalp/react-server-side-table": "^1.0.25",
    "react": "^16.12.0",
    "react-dom": "^16.12.0"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.21.5",
    "@babel/preset-react": "^7.18.6",
    "@babel/preset-typescript": "^7.21.5",
    "@rollup/plugin-commonjs": "^24.1.0",
    "@rollup/plugin-node-resolve": "^15.0.2",
    "@rollup/plugin-typescript": "^11.1.0",
    "@svgr/rollup": "^5.5.0",
    "@types/react": "^16.3.13",
    "@types/react-dom": "^16.9.12",
    "@types/styled-components": "^5.1.26",
    "babel-core": "^6.26.3",
    "babel-runtime": "^6.26.0",
    "copyfiles": "^2.4.1",
    "rollup": "^3.0.0",
    "rollup-plugin-dts": "^5.3.0",
    "rollup-plugin-peer-deps-external": "^2.2.4",
    "rollup-plugin-terser": "^7.0.2",
    "typescript": "^4.5.2"
  },
  "keywords": [
    "react",
    "typescript",
    "npm"
  ],
  "readme": "## React Server Side Table\r\n\r\nReact Server Side Table is a is a component based on React-Table, works the same way, except that it introduces the notion of pagination, sorting and filtering in Server Side simply. \r\nIt is also possible to apply user parameters, such as the display comfort or the columns to be displayed. \r\n\r\nHere is how to install it: \r\n\r\n```\r\nnpm i @optalp/react-server-side-table\r\n```\r\n\r\nThen how to import it : \r\n```\r\nimport ServerSideTable from \"@optalp/react-server-side-table\"\r\n```\r\n\r\nThen you can call him in the renderer, here an example : \r\n```javascript\r\n<ServerSideTable \r\n    ref={SSTRef}\r\n    columns={columns}\r\n    perPageItems={10}\r\n    isFilter\r\n    filtersList={filterColumns}\r\n    filterParsedType=\"fuzzy\"\r\n    isSorter\r\n    onDataChange={getData} \r\n    showAddBtn\r\n    counterColumnToItemGoLeft={3}\r\n    onAddClick={() => history.push('/app/users/new')}/>\r\n```\r\n---\r\n\r\n#### Props : \r\n|            Props           |                                        Type                                        |                                                                                        Examples                                                                                        |                                 Notes                                 |\r\n|:--------------------------:|:----------------------------------------------------------------------------------:|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------------------:|\r\n| ref                        | Ref                                                                                | const SSTRef = useRef() ... ref={SSTRef}                                                                                                                                               | use to call reloadData() function                                     |\r\n| columns                    | {Header:string, accessor: string, sorterAttribut,...}[] => More informations below |                                                                                                                                                                                        |                                                                       |\r\n| onDataChange()             | function(requestParams: DataRequestParams): Promise<GPaginationObject<any>>        | ```` onDataChange={getData} ```                                                                                                                                                        |                                                                       |\r\n| isFilter?                  | boolean                                                                            |                                                                                                                                                                                        | default: false                                                        |\r\n| newFiltersList?               | NewFilterItem[] details below                                                         |                                                                                                                                                                                        |                                                                       |\r\n| isSorter?                  | boolean                                                                            | const filtersList = [ {name: \"firstname\", label: \"Pr√©nom\", type: \"text\"}, {name:\"enabled\", label: \"Statut\", type:\"booleanRadio\", radioValues: [{value: \"enabled\", label: \"Actif\"}}]} ] | default: false                                                        |\r\n| defaultSorter?             | string                                                                             |                                                                                                                                                                                        |                                                                       |\r\n| perPageItems?              | 5 \\| 10 \\| 20 \\| 50                                                                |                                                                                                                                                                                        | default: 5 Default per page item in first call api                    |\r\n| isRenderSubComponent?      | boolean                                                                            |                                                                                                                                                                                        | default: false Enabled expanded rows                                  |\r\n| renderSubComponent?        | JSX Component                                                                      |                                                                                                                                                                                        |                                                                       |\r\n| showAddBtn?                | boolean                                                                            |                                                                                                                                                                                        | default: false                                                        |\r\n| onAddClick()?              | void                                                                               |                                                                                                                                                                                        |                                                                       |\r\n| darkMode?                  | boolean                                                                            |                                                                                                                                                                                        | default: false                                                        |\r\n| withoutHeader              | boolean                                                                            |                                                                                                                                                                                        | default: false Remove all header of array (settings, filters, etc...) |\r\n| marginPagesDisplayed              | number                                                                            |                                                                                                                                                                                        | react paginate props. default: 2 |\r\n| pageRangeDisplayed              | number                                                                            |                                                                                                                                                                                        | react paginate props. default: 2 |\r\n| translationsProps          | Translations details below                                                         |                                                                                                                                                                                        |                                                                       |\r\n| filtersPosition            | \"field\" \\| \"list\"                                                                  |                                                                                                                                                                                        | default: list Use to change filter view type.                         |\r\n| tableId?                   | string                                                                             |                                                                                                                                                                                        | use to save filter after each submit                                  |\r\n| optionnalsHeaderContent?   | ReactElement[]                                                                     |                                                                                                                                                                                        |                                                                       |\r\n| enabledExport?             | boolean                                                                            |                                                                                                                                                                                        | Define custom objects for mobile only                                 |\r\n| onRowClick()?  | (row: Row): void                                                                             | Add this to enabled on row Click function viewport                                                                                                                                            |                                                                       |\r\n| mobileColumns?             | {Header:string, accessor: string, ...}[]                                           |                                                                                                                                                                                        |                                                                       |\r\n| containerClassName?        | string                                                                             |                                                                                                                                                                                        |                                                                       |\r\n| filtersContainerClassName? | string                                                                             |                                                                                                                                                                                        |                                                                       |\r\n| selectableRows?            | boolean                                                                            |                                                                                                                                                                                        |                                                                       |\r\n| selectedRowsAction?        | Object of SSTCustomActions                           |                                                                                                                                                                                        |                                                                       |\r\n| withoutTotalElements?  | boolean                                                                             | Enabled this to remove total text                                                                                                                                            |                                                                       |\r\n| showVerticalBorders?       | boolean                                                                            |                                                                                                                                                                                        |                                                                       |\r\n| defaultProps?              | DefaultProps                                                                    | If you want to use default props (filters, sort, hidden columns), you need to use useSST hooks, see more below                                                                         |                                                                       |\r\n| counterColumnToItemGoLeft  | number                                                                             | Add this if filters is on right of viewport                                                                                                                                            |                                                                       |\r\n| newDefaultFilters  | NewDefaultFilterItem[]                                                                             |                                                                                                                                         |                                                                       |\r\n| asDefaultFilters  | boolean                                                                             |                           Enabled default filters usage                                                                                                              |                                                                       |\r\n\r\n##### GetData\r\nThe getData function must call the api using the parameters returned by onDataChange, and returning a PaginationObject object (content & pageabe). \r\nHere is an example: \r\n``` typescript\r\n    const getData = e => {\r\n        const {offset, perPage, filters, sorter} = e\r\n        return ProfilesAPI.getStaffWithAccount({\r\n            ...filters, //For fuzzy filter use \"...filters\", for RSQL filter use only \"filters\"\r\n            size: perPage,\r\n            page: offset,\r\n            sort: !!sorter ? sorter : \"enabled,asc\"\r\n        })\r\n    }\r\n```\r\n\r\n##### Reload Data\r\nIn addition to the automatic reload after a change of page, filters, etc... It is possible to manually reload data from the parent component, just call the reloadData() function like this:  \r\n```javascript\r\nSSTRef.current.reloadData();\r\n```\r\n\r\n#### Columns oject\r\nA column object can be composed like this: \r\n\r\n```typescript\r\nHeader: string, //Title of column\r\naccessor: string //Accessor in data object to get value\r\nCell({value, row}): ReactElement\r\nsorterAttribut?: string //Accessor to sort\r\nalignment?: \"left\" | \"center\" | \"right\",\r\nid?: 'expander', //Use this to enable SubRowComponent expander\r\nexportFormat?: (e: CellValue): string, //Example: value => `${value+10}` \r\n```\r\n\r\n\r\n##### Sorter \r\nThe sorting is done automatically on the columns, you just have to define the sorting field as a property in the column object. \r\n```javascript\r\nHeader: Nom de la salle,\r\naccessor:'name',\r\nsorterAttribut: 'name', //api field\r\n```\r\n\r\n---\r\n#### Filter\r\nSince version 2.0, only the \"rsql\" type filter is accepted, making the package more flexible. \r\nSimply define an array in `newFiltersList`. \r\n\r\nHere example of filterItem : \r\n```javascript\r\n\r\nconst professionsSelect = [\r\n    {value:\"DOCTOR\", label:translateProfession(\"DOCTOR\")},\r\n    {value:\"NURSE\", label:translateProfession(\"NURSE\")},\r\n]\r\n\r\nconst fitlers: NewFilterItem[] = [\r\n    {name:\"lastName\", label:\"Nom\", type:\"text\", idAccessor:\"lastName\"},\r\n    {name:\"profession\", label:\"Profession\", type:\"checkbox\", idAccessor:\"profession\", optionsValues:professionsSelect},\r\n    {name:\"active\", label:\"Statut\", type:\"booleanRadio\", idAccessor:\"active\", optionsValues: [{value: \"active\", label: \"Active\"}]},\r\n]\r\n```\r\n\r\n###### Saved and use Defaults Props\r\n\r\nYou can enable filter saving by choosing a unique \"tableId\", usually the pattern is: `[project-name]-[entity]-table`\r\n\r\n\r\nHere is an example: \r\n```javascript\r\nimport {ServerSideTable, useSST} from '@optalp/react-server-side-table';\r\n\r\nconst TABLE_ID = \"tv2-logger-table\"\r\n\r\nconst fitlers: NewFilterItem[] = [\r\n    {name:\"lastName\", label:\"Nom\", type:\"text\", idAccessor:\"lastName\"},\r\n]\r\nconst [defaultFilterItems, setDefaultFilterItems] = useState<NewDefaultFilterItem[]>([])\r\nconst [state, state] = useState<any>(null)\r\n\r\n\r\nuseEffect(() => {\r\n    if(!!state)\r\n        setDefaultFilterItems([\r\n            {name: \"lastName\", value: state, locked: true}\r\n        ])\r\n}, [state])\r\n\r\nreturn(\r\n    <>\r\n      {!!defaultFilterItems.length &&\r\n        <ServerSideTable\r\n            ref={ServerSideTableRef}\r\n            columns={columns}\r\n            isFilter\r\n            newFiltersList={filterColumns}\r\n            isSorter\r\n            onDataChange={getData}\r\n            tableId={TABLE_ID}\r\n            asDefaultFilters\r\n            newDefaultFilters={defaultFilterItems} />\r\n    }\r\n    </>\r\n)\r\n```\r\n\r\n```javascript\r\n<ServerSideTable \r\n    ref={ServerSideTableRef}\r\n    columns={columns}\r\n    onDataChange={getData}\r\n    isFilter\r\n    filtersList={fitlers}\r\n    filterParsedType=\"rsql\"\r\n    defaultFilters={createdFilters}\r\n    tableId={tableId}/>\r\n```\r\n\r\n###### Locked Filters\r\nTo lock a filter, simply add the `locked: true` attribute to a defaultFilter so that it is taken into account.\r\n\r\n```javascript\r\n<ServerSideTable\r\n    ref={ServerSideTableRef}\r\n    columns={columns}\r\n    darkMode={darkMode}\r\n    onDataChange={getData}\r\n    newFiltersList={filterColumns}\r\n    asDefaultFilters\r\n    newDefaultFilters={[\r\n        {name: \"lastName\", value: \"lockedLastNameValue\", locked: true}\r\n    ]} \r\n/> \r\n\r\n```\r\n---\r\n\r\n##### Sub component\r\nTo activate the subComponent, you just have to add the boolean isRenderSubComponent and the props renderRowSubComponent which expects a JSX element. \r\n\r\nHere an example : \r\n```javascript\r\nconst renderRowSubComponent = React.useCallback(\r\n    ({row}) => ( // All data in a row send by SST\r\n        <div style={{width: \"100%\", margin: \"0 auto\"}}>\r\n            <p>{row.original.name}</p>\r\n        </div>\r\n    ),\r\n[])\r\n\r\n[...]\r\n\r\n<ServerSideTable\r\n    {...}\r\n    isRenderSubComponent\r\n    renderSubComponent={renderRowSubComponent}/>\r\n    \r\n```\r\n\r\n---\r\n\r\n##### Optional header content\r\nUseful for adding buttons to interact with the panel, redirecting to secondary actions, etc...\r\nThis will create a series of grouped buttons, each customizable.\r\n\r\nExample : \r\n```\r\n<ServerSideTable\r\n    ref={ServerSideTableRef}\r\n    columns={columns}\r\n    tableId={TABLE_ID}\r\n    filtersList={filterColumns}\r\n    optionnalsHeaderContent={{\r\n        addManager: {text: \"Manager\", icon: <i className='ri-add-line'/>, onClick: () => history.push(...), color: \"orange\"},\r\n        addAdmin: {text: \"Administrateur\", icon: <i className='ri-add-line'/>, onClick: () => history.push(...), color: \"medium\"}\r\n    }}\r\n/>\r\n```\r\n\r\n##### Select Rows\r\nJust add the `selectableRows` attribute and a set of JSX.Element in a `selectedRowsAction` attribute which will be displayed only when at least one row is selected. \r\n\r\nThen you just have to use the `getSelectedRows` function (accessible via the ref) to get the array of selected rows.\r\n\r\nExample : \r\n```\r\n<ServerSideTable\r\n    ref={ServerSideTableRef}\r\n    columns={columns}\r\n    tableId={TABLE_ID}\r\n    filtersList={filterColumns}\r\n    selectableRows\r\n    selectedRowsAction={{\r\n         editSelected: {\r\n            text: \"Modifier\", \r\n            icon: <i className='ri-edit-2-line'/>, \r\n            onClick: () => console.log(\"Edit Selected Lines\"), \r\n            color: \"medium\"}\r\n    }}\r\n/>\r\n```\r\n\r\n##### API Functions\r\nThere are APIs to interact with the data in the array, which are accessible to it. \r\n\r\n`SSTRef.current.reloadData()` : Reload the data manually.\r\n`SSTRef.current.getSelectedRows()` : Retrieves the selected rows.\r\n\r\n\r\n---\r\n#### Types\r\n\r\n``` typescript\r\ntype RefHandler = {\r\n    reloadData: () => void,\r\n    getSelectedRows: () => any[]\r\n} \r\n```\r\n\r\n``` typescript\r\ninterface DataRequestParam {\r\n    offset: number, \r\n    perPage: number, \r\n    filters: string | object, \r\n    sorter?:string\r\n}\r\n```\r\n\r\n``` typescript\r\nexport type FilterType = \"text\" | \"number\" | \"date\" | \"checkbox\" | \"checkboxCtn\" | \"checkboxCtnIntegers\"| \"checkboxCtnStrings\" | \"booleanRadio\" | \"geoloc\"\r\n\r\ntype DefaultFiltersOptions = TextFilter | NumberFilter | DateFilter\r\n\r\ntype FilterStateItemValue = {\r\n    option: DefaultFiltersOptions,\r\n    value: string\r\n}\r\n\r\ntype FilterItem = {\r\n    value: string\r\n    label:string\r\n    name: string\r\n    type: FilterType,\r\n    optionsValues?: {value: string, label:string}[],\r\n    idAccessor?:string\r\n    locked?:boolean\r\n    option: string\r\n    parsedValue?:string\r\n}\r\n\r\ntype DefaultFilterItem = {\r\n    name: string\r\n    value: any\r\n    locked?:boolean\r\n    parsedValue?:string\r\n}\r\n\r\ntype DefaultProps = {\r\n    sort?: SorterRecord,\r\n    hideColumns?: string[] \r\n    showVerticalBorders?: boolean\r\n    lineSpacing?: LineSpacing\r\n    perPageItems?: number\r\n}\r\n\r\nexport type Sorter = {\r\n    attribut: string,\r\n    value: \"asc\" | \"desc\"\r\n}\r\n\r\nexport interface SorterRecord {\r\n    [key:string]: Sorter\r\n}\r\n```\r\n\r\n``` typescript\r\ntype Sorter = {\r\n    attribut: string,\r\n    value: \"asc\" | \"desc\"\r\n}\r\n\r\ninterface SorterRecord {\r\n    [key:string]: Sorter\r\n}\r\n\r\ntype SSTCustomActions = {\r\n    text: string, \r\n    onClick(): void\r\n    icon?: JSX.Element, \r\n    color?: string,\r\n}\r\n\r\n```\r\n\r\n``` typescript\r\nBy default, the French translation is activated\r\n\r\ntype Translations = {\r\n    add?:string,\r\n    sortBy?: string,\r\n    appliedFilters?:string,\r\n    linePerPage?:string,\r\n    clearAll?: string,\r\n    clear?: string\r\n    apply?:string\r\n    filterFor?:string\r\n    and?:string\r\n    yes?:string\r\n    no?:string\r\n    na?:string\r\n    loading?: string\r\n    filtersViewer?: {\r\n        contain?: string\r\n        startWith?: string\r\n        finishWith?: string\r\n        equal?: string\r\n        moreThan?: string\r\n        lessThan?: string\r\n        between?: string\r\n        atDay?: string\r\n        minDay?: string\r\n        maxDay?: string\r\n        kmAroundOf?: string\r\n    }\r\n    settings?:{\r\n        toggleColumns?: string,\r\n        lineSpacing?: string,\r\n        export?: string,\r\n        back?: string,\r\n        highHeight?: string,\r\n        mediumHeight?:  string,\r\n        smallHeight?: string,\r\n        filterType:string,\r\n        filterList: string,\r\n        filterField: string\r\n        clearCache?: string\r\n    }\r\n}\r\n```\r\n\r\n``` typescript\r\ntype GPaginationObject<T> = {\r\n    pageable: Pageable\r\n    last: boolean,\r\n    totalPages: number,\r\n    totalElements: number,\r\n    sort: Sort\r\n    numberOfElements: number,\r\n    first: boolean,\r\n    size: number,\r\n    number: number,\r\n    empty: boolean\r\n    content: T[]\r\n}\r\n```\r\n\r\n"
}